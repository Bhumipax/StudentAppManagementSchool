CREATE TABLE Building (
    BuildingID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- รหัสอาคาร (auto-increment)
    BName VARCHAR(50) NOT NULL,         -- ชื่ออาคาร
    BFloor INT,                          -- จำนวนชั้น
    CONSTRAINT check_floor CHECK (BFloor >= 1) -- ตรวจสอบจำนวนชั้น
);

CREATE TABLE Classroom (
    ClassroomID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- รหัสห้องเรียน (auto-increment)
    Number VARCHAR(5) NOT NULL, -- เลขห้องเรียน
    Capacity INT,               -- ความจุนักเรียน
    BuildingID INT,             -- รหัสอาคาร
    CONSTRAINT fk_building FOREIGN KEY (BuildingID) REFERENCES Building(BuildingID)
);

CREATE TABLE UserAccount (
    UserID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- รหัสผู้ใช้งาน (รันเลขอัตโนมัติ)
    Username VARCHAR(8) NOT NULL,  -- ชื่อผู้ใช้ (รหัสนักเรียนและรหัสครู)
    Password VARCHAR(10) NOT NULL, -- รหัสผ่าน
    Role INT CHECK (Role IN (1, 2)) NOT NULL,  -- บทบาทผู้ใช้งาน (1: นักเรียน, 2: ครู)
    CONSTRAINT check_username_format CHECK (Username ~ '^\d{6}$' OR Username ~ '^\d{8}$')  -- ตรวจสอบรูปแบบรหัสผู้ใช้ (6 หลัก หรือ 8 หลัก)
);


CREATE TABLE Teacher (
    TeacherID VARCHAR(8) PRIMARY KEY,  -- รหัสครู (ปีเดือนรันเลข)
    TFName VARCHAR(50) NOT NULL,       -- ชื่อครู
    TLName VARCHAR(50) NOT NULL,       -- นามสกุลครู
    TGender INT CHECK (TGender IN (1, 2, 3)) NOT NULL,  -- เพศ (1: ชาย, 2: หญิง, 3: อื่นๆ)
    TAge INT NOT NULL,                 -- อายุ
    TPhoneNumber VARCHAR(10) NOT NULL, -- เบอร์โทรศัพท์ครู
    TPosition VARCHAR(25) NOT NULL,    -- ตำแหน่ง
    Address VARCHAR(150) NOT NULL,     -- ที่อยู่
    UserID INT,                        -- รหัสผู้ใช้งาน
    CONSTRAINT fk_useraccount FOREIGN KEY (UserID) REFERENCES UserAccount(UserID),
    CONSTRAINT check_teacher_id_format CHECK (TeacherID ~ '^\d{2}\d{2}\d{4}$')  -- รูปแบบรหัสครู (YYMMxxxx)
);

CREATE TABLE Subject (
    SubjectID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- รหัสวิชา (รันเลขอัตโนมัติ)
    SName VARCHAR(50) NOT NULL,                               -- ชื่อวิชา
    SCredit DECIMAL(3, 1) NOT NULL,                           -- หน่วยกิต
    SGradeLevel INT CHECK (SGradeLevel IN (1, 2, 3)) NOT NULL, -- ระดับชั้นที่เปิดสอน (1: ม.4, 2: ม.5, 3: ม.6)
    SType INT CHECK (SType IN (1, 2)) NOT NULL,               -- ประเภทรายวิชา (1: รายวิชาพื้นฐาน, 2: รายวิชาเพิ่มเติม)
    TeacherID VARCHAR(8),                                     -- รหัสครู (เชื่อมโยงกับ Teacher)
    CONSTRAINT fk_teacher FOREIGN KEY (TeacherID) REFERENCES Teacher(TeacherID)  -- Foreign Key เชื่อมกับ Teacher
);

CREATE TABLE Schedule (
    ScheduleID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- รหัสตารางสอน
    Day VARCHAR(10) NOT NULL,                                     -- วันที่มีการเรียนการสอน
    StartTime TIME NOT NULL,                                       -- เวลาเริ่มการเรียนการสอน
    EndTime TIME NOT NULL,                                         -- เวลาสิ้นสุดการเรียนการสอน
    AcademicYear VARCHAR(9) NOT NULL,                              -- ปีการศึกษาที่มีการเรียนการสอน
    Semester INT CHECK (Semester IN (1, 2)) NOT NULL,              -- ภาคเรียน (1: กลางภาค, 2: ปลายภาค)
    Room INT NOT NULL,                                             -- รหัสห้องเรียน (ClassroomID)
    TeacherID VARCHAR(8) NOT NULL,                                 -- รหัสครู (TeacherID)
    SubjectID INT NOT NULL,                                        -- รหัสวิชา (SubjectID)
    CONSTRAINT fk_classroom FOREIGN KEY (Room) REFERENCES Classroom(ClassroomID), -- Foreign Key to Classroom
    CONSTRAINT fk_teacher FOREIGN KEY (TeacherID) REFERENCES Teacher(TeacherID),   -- Foreign Key to Teacher
    CONSTRAINT fk_subject FOREIGN KEY (SubjectID) REFERENCES Subject(SubjectID)    -- Foreign Key to Subject
);

CREATE TABLE Student (
    StudentID VARCHAR(6) PRIMARY KEY,                            -- รหัสนักเรียน (มีรูปแบบ YYxxxx)
    SFName VARCHAR(50) NOT NULL,                                  -- ชื่อนักเรียน
    SLName VARCHAR(50) NOT NULL,                                  -- นามสกุลนักเรียน
    SAge INT NOT NULL,                                            -- อายุ
    SGender INT CHECK (SGender IN (1, 2, 3)) NOT NULL,            -- เพศ (1: ชาย, 2: หญิง, 3: อื่นๆ)
    SAddress VARCHAR(150) NOT NULL,                               -- ที่อยู่
    SPhoneNumber VARCHAR(10) NOT NULL,                            -- เบอร์โทรศัพท์นักเรียน
    CONSTRAINT check_student_id_format CHECK (StudentID ~ '^\d{2}\d{4}$')  -- ตรวจสอบรูปแบบ StudentID
);

CREATE TABLE StudentTimeTable (
    StudentTimeTableID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- รหัสตารางเช็คชื่อ
    Date DATE NOT NULL,                                                 -- วันที่
    CheckedTime TIME NOT NULL,                                          -- เวลาเช็คชื่อ
    Status INT CHECK (Status IN (0, 1)) NOT NULL,                       -- สถานะ (0: ไม่มา, 1: มา)
    ScheduleID INT NOT NULL,                                            -- รหัสตารางสอน (ScheduleID)
    StudentID VARCHAR(6) NOT NULL,                                      -- รหัสนักเรียน (StudentID)
    CONSTRAINT fk_schedule FOREIGN KEY (ScheduleID) REFERENCES Schedule(ScheduleID), -- Foreign Key to Schedule
    CONSTRAINT fk_student FOREIGN KEY (StudentID) REFERENCES Student(StudentID)    -- Foreign Key to Student
);

CREATE TABLE EducationData (
    EducationDataID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- รหัสข้อมูลผลการเรียน
    AcademicYear VARCHAR(9) NOT NULL,                                  -- ปีการศึกษา (เช่น 2024-2025)
    GPA DECIMAL(4,2),                                                  -- เกรดเฉลี่ย (เช่น 3.75)
    Semester INT CHECK (Semester IN (1, 2)) NOT NULL,                   -- ภาคเรียน (1: กลางภาค, 2: ปลายภาค)
    TotalCredit DECIMAL(4,1),                                          -- หน่วยกิตทั้งหมดที่เรียน (เช่น 17.5)
    PassedCredit DECIMAL(4,1),                                         -- หน่วยกิตทั้งหมดที่ผ่าน (เช่น 15.0)
    StudentID VARCHAR(6) NOT NULL,                                     -- รหัสนักเรียน
    CONSTRAINT fk_student FOREIGN KEY (StudentID) REFERENCES Student(StudentID) -- Foreign Key to Student
);

CREATE TABLE ScoreDetail (
    ScoreDetailID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- รหัสรายละเอียดคะแนน
    ScoreValue DECIMAL(5,2) NOT NULL,                                -- คะแนน (เช่น 30.5)
    ScoreSemester INT CHECK (ScoreSemester IN (1, 2)) NOT NULL,     -- คะแนนนี้เป็นของภาคเรียนไหน (1: กลางภาค, 2: ปลายภาค)
    ScoreType VARCHAR(20) NOT NULL,                                  -- ประเภทของคะแนน (เช่น สอบกลางภาค)
    SubjectID INT NOT NULL,                                          -- รหัสวิชา (SubjectID)
    EducationDataID INT NOT NULL,                                    -- รหัสข้อมูลผลการเรียน (EducationDataID)
    CONSTRAINT fk_subject FOREIGN KEY (SubjectID) REFERENCES Subject(SubjectID), -- Foreign Key to Subject
    CONSTRAINT fk_educationdata FOREIGN KEY (EducationDataID) REFERENCES EducationData(EducationDataID) -- Foreign Key to EducationData
);

CREATE TABLE Parent (
    ParentID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- รหัสผู้ปกครอง (ใช้ BIGINT และรันเลขอัตโนมัติ)
    PFName VARCHAR(50) NOT NULL,            -- ชื่อผู้ปกครอง
    PLName VARCHAR(50) NOT NULL,            -- นามสกุลผู้ปกครอง
    PPhoneNumber VARCHAR(10) NOT NULL,      -- เบอร์โทรศัพท์ผู้ปกครอง
    PAddress VARCHAR(255),                  -- ที่อยู่ (สามารถเป็นค่าว่างได้)
    PRelationToStudent VARCHAR(10),         -- ความสัมพันธ์กับนักเรียน (เช่น มารดา, บิดา)
    CONSTRAINT check_phone CHECK (PPhoneNumber ~ '^\d{10}$')   -- ตรวจสอบเบอร์โทรศัพท์เป็น 10 หลัก
);

CREATE TABLE Enrollment (
    SubjectID INT,                     -- รหัสวิชา
    StudentID VARCHAR(6),               -- รหัสนักเรียน
    Semester INT CHECK (Semester IN (1, 2)) NOT NULL, -- ภาคเรียนที่ลงเรียน (1: กลางภาค, 2: ปลายภาค)
    Type INT CHECK (Type IN (1, 2)) NOT NULL,         -- ประเภทรายวิชาที่ลงเรียน (1: รายวิชาพื้นฐาน, 2: รายวิชาเพิ่มเติม)
    Date DATE NOT NULL,                 -- วันที่ลงเรียน
    PRIMARY KEY (SubjectID, StudentID), -- รหัสวิชาและรหัสนักเรียนเป็น PK รวมกัน
    CONSTRAINT fk_subject FOREIGN KEY (SubjectID) REFERENCES Subject(SubjectID), -- เชื่อมโยงกับตาราง Subject
    CONSTRAINT fk_student FOREIGN KEY (StudentID) REFERENCES Student(StudentID)  -- เชื่อมโยงกับตาราง Student
);

CREATE TABLE StudentParent (
    ParentID BIGINT NOT NULL,  -- รหัสผู้ปกครอง (ID card) ใช้ BIGINT
    StudentID VARCHAR(6) NOT NULL,  -- รหัสนักเรียน
    CONSTRAINT pk_studentparent PRIMARY KEY (ParentID, StudentID),  -- คีย์หลัก (ParentID, StudentID)
    CONSTRAINT fk_parent FOREIGN KEY (ParentID) REFERENCES Parent(ParentID),  -- Foreign Key จาก Parent
    CONSTRAINT fk_student FOREIGN KEY (StudentID) REFERENCES Student(StudentID)  -- Foreign Key จาก Student
);






